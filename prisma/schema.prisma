generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Location {
  location_id          Int           @id @default(autoincrement())
  location_name        String        @unique
  location_manager_id  String?       @unique
  isActive             Boolean?      @default(true)
  jetski_location_list Jetski[]
  location_manager     User?         @relation("ManagedLocation", fields: [location_manager_id], references: [user_id])
  reservations_list    Reservation[]
  user_location_list   User[]        @relation("UserLocation")
}

model User {
  user_id          String     @id @default(cuid())
  name             String?
  email            String?    @unique
  password         String?
  contactNumber    String?    @unique
  user_status      UserStatus @default(ACTIVE)
  user_role        UserRole   @default(GUEST)
  user_location_id Int?
  managed_location Location?  @relation("ManagedLocation")
  user_location    Location?  @relation("UserLocation", fields: [user_location_id], references: [location_id])
}

model Jetski {
  jetski_id                Int           @id @default(autoincrement())
  jetski_registration      String        @unique
  jetski_model             String
  jetski_topSpeed          String
  jetski_kW                String
  jetski_manufacturingYear String
  jetski_status            JetskiStatus  @default(AVAILABLE)
  jetski_location_id       Int?
  jetski_location          Location?     @relation(fields: [jetski_location_id], references: [location_id])
  jetski_reservations      Reservation[] @relation("JetskiToReservation")
}

model Reservation {
  reservation_id          Int      @id @default(autoincrement())
  startTime               DateTime
  endTime                 DateTime
  createdAt               DateTime @default(now())
  reservationOwner        String
  contactNumber           String
  totalPrice              Float
  discount                Float
  isCurrentlyRunning      Boolean? @default(false)
  hasItFinished           Boolean? @default(false)
  rentaloption_id         Int      @default(0)
  reservation_location_id Int
  reservation_location    Location @relation(fields: [reservation_location_id], references: [location_id])
  reservation_jetski_list Jetski[] @relation("JetskiToReservation")
}

model RentalOptions {
  rentaloption_id          Int     @id @default(autoincrement())
  rentaloption_description String
  duration                 Int
  rentalprice              Float
  isAvailable              Boolean @default(true)
}

enum RentalOptionType {
  SAFARI
  REGULAR_TOUR
}

enum JetskiStatus {
  AVAILABLE
  NOT_AVAILABLE
  NOT_IN_FLEET
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}
