generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Location {
  id            Int           @id @default(autoincrement())
  name          String        @unique @map("location_name")
  managerId     String?       @unique @map("location_manager_id")
  isActive      Boolean?      @default(true)
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  jetskis       Jetski[]
  manager       User?         @relation("ManagedLocation", fields: [managerId], references: [user_id])
  reservations  Reservation[]
  users         User[]        @relation("UserLocation")
}

model User {
  user_id          String     @id @default(cuid())
  name             String?
  email            String?    @unique
  password         String?
  contactNumber    String?    @unique
  user_status      UserStatus @default(ACTIVE)
  user_role        UserRole   @default(GUEST)
  user_location_id Int?
  managed_location Location?  @relation("ManagedLocation")
  user_location    Location?  @relation("UserLocation", fields: [user_location_id], references: [id])
}

model Jetski {
  id                Int           @id @default(autoincrement())
  registration      String        @unique
  model             String
  topSpeed          String
  manufacturingYear Int
  enginePower       Int?
  peopleCapacity    Int?
  fuelCapacity      Decimal?      
  fuelConsumption   Decimal?
  status            JetskiStatus  @default(AVAILABLE)
  locationId        Int?
  location          Location?     @relation(fields: [locationId], references: [id])
  reservations      Reservation[] @relation("JetskiToReservation")
}

model Reservation {
  id                      Int      @id @default(autoincrement())
  startTime               DateTime
  endTime                 DateTime
  createdAt               DateTime @default(now())
  ownerName               String?
  contactNumber           String?
  totalPrice              Float
  discount                Float
  status                  ReservationStatus @default(PLANNED)
  rentalOptionId          Int
  locationId              Int
  location                Location @relation(fields: [locationId], references: [id])
  jetskis                 Jetski[] @relation("JetskiToReservation")
}

model RentalOption {
  id                Int     @id @default(autoincrement())
  description       RentalOptionType
  duration          Int
  price             Float
  status            Boolean @default(true)
}

enum RentalOptionType {
  REGULAR_TOUR
  SAFARI
}

enum JetskiStatus {
  AVAILABLE
  NOT_AVAILABLE
  NOT_IN_FLEET
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum ReservationStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}